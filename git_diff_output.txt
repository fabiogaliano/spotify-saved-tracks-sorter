diff --git a/app/features/liked-songs-management/components/LikedSongsContent.tsx b/app/features/liked-songs-management/components/LikedSongsContent.tsx
index 022e6a8..2b5f640 100644
--- a/app/features/liked-songs-management/components/LikedSongsContent.tsx
+++ b/app/features/liked-songs-management/components/LikedSongsContent.tsx
@@ -34,7 +34,8 @@ import TrackAnalysisModal from '~/components/TrackAnalysisModal';
 import { useLikedSongsManagement } from '../hooks/useLikedSongsManagement';
 import { useAnalysisSubscription } from '../hooks/useAnalysisSubscription';
 import { useLikedSongsUIContext } from '../store/liked-songs-ui-store';
-import { useSyncLikedSongs, useAnalysisStatus } from '../queries/liked-songs-queries';
+import { useSyncLikedSongs, useAnalysisStatus, likedSongsKeys } from '../queries/liked-songs-queries';
+import { useQueryClient } from '@tanstack/react-query';
 
 // Types
 export type UIAnalysisStatus = 'analyzed' | 'pending' | 'not_analyzed' | 'failed' | 'unknown';
@@ -89,21 +90,60 @@ const LikedSongsContent: React.FC<LikedSongsContentProps> = ({ initialSongs, use
   // Mutations
   const syncMutation = useSyncLikedSongs();
   const { data: analysisStatus, isLoading: isAnalysisStatusLoading } = useAnalysisStatus();
-  
-  // Debug analysis status (only when not loading and has meaningful data)
-  if (!isAnalysisStatusLoading && analysisStatus?.hasActiveJob) {
-    console.log('analysisStatus in LikedSongsContent:', analysisStatus);
-    console.log('dbStats being passed:', analysisStatus?.currentJob?.dbStats);
-  }
+  const queryClient = useQueryClient();
   
   // Don't render real-time subscription until analysis status is loaded
   const shouldEnableSubscription = !isAnalysisStatusLoading;
   
   // Real-time updates - only enable after analysis status loads
-  const { isConnected } = useAnalysisSubscription({ 
+  const { isConnected, completedJobsManager } = useAnalysisSubscription({ 
     userId, 
     enabled: shouldEnableSubscription 
   });
+
+  // Determine which job to show - active job or latest completed job
+  const displayJob = (() => {
+    // First check for active job
+    if (analysisStatus?.hasActiveJob && analysisStatus?.currentJob) {
+      return {
+        job: analysisStatus.currentJob,
+        isActive: true
+      };
+    }
+    
+    // Then check for completed jobs from current session
+    const latestCompletedJob = completedJobsManager.completedJobs[0]; // Most recent
+    if (latestCompletedJob) {
+      return {
+        job: {
+          id: latestCompletedJob.id,
+          status: latestCompletedJob.status,
+          trackCount: latestCompletedJob.trackCount,
+          trackStates: latestCompletedJob.trackStates,
+          startedAt: latestCompletedJob.startedAt,
+          dbStats: latestCompletedJob.dbStats
+        },
+        isActive: false,
+        isCompleted: true
+      };
+    }
+    
+    return null;
+  })();
+
+  // Handler to clear job when manually closed
+  const handleClearJob = () => {
+    if (displayJob?.isCompleted) {
+      // Remove from completed jobs
+      completedJobsManager.removeCompletedJob(displayJob.job.id);
+    } else {
+      // Clear active job cache (shouldn't happen but fallback)
+      queryClient.setQueryData(likedSongsKeys.analysisStatus(), { 
+        hasActiveJob: false, 
+        currentJob: null 
+      });
+    }
+  };
   
   // Calculate progress from trackStates if dbStats is missing or incorrect
   const calculateProgressFromTrackStates = (job: any) => {
@@ -117,13 +157,13 @@ const LikedSongsContent: React.FC<LikedSongsContentProps> = ({ initialSongs, use
     return { processed, succeeded, failed };
   };
   
-  const fallbackProgress = analysisStatus?.currentJob ? calculateProgressFromTrackStates(analysisStatus.currentJob) : null;
+  const fallbackProgress = displayJob?.job ? calculateProgressFromTrackStates(displayJob.job) : null;
   
   // Use dbStats if available, otherwise use calculated progress
   const progressStats = {
-    tracksProcessed: analysisStatus?.currentJob?.dbStats?.tracksProcessed ?? fallbackProgress?.processed ?? 0,
-    tracksSucceeded: analysisStatus?.currentJob?.dbStats?.tracksSucceeded ?? fallbackProgress?.succeeded ?? 0,
-    tracksFailed: analysisStatus?.currentJob?.dbStats?.tracksFailed ?? fallbackProgress?.failed ?? 0,
+    tracksProcessed: displayJob?.job?.dbStats?.tracksProcessed ?? fallbackProgress?.processed ?? 0,
+    tracksSucceeded: displayJob?.job?.dbStats?.tracksSucceeded ?? fallbackProgress?.succeeded ?? 0,
+    tracksFailed: displayJob?.job?.dbStats?.tracksFailed ?? fallbackProgress?.failed ?? 0,
   };
   
   // Table setup
@@ -275,11 +315,12 @@ const LikedSongsContent: React.FC<LikedSongsContentProps> = ({ initialSongs, use
           valueColor="text-blue-400"
           iconBg="bg-blue-500/20"
           icon={<Clock className="h-6 w-6 text-blue-400" />}
-          currentJob={analysisStatus?.currentJob}
-          showJobStatus={!!analysisStatus?.hasActiveJob}
+          currentJob={displayJob?.job || null}
+          showJobStatus={!!displayJob}
           tracksProcessed={progressStats.tracksProcessed}
           tracksSucceeded={progressStats.tracksSucceeded}
           tracksFailed={progressStats.tracksFailed}
+          onClearJob={handleClearJob}
         />
 
         <StatusCard
diff --git a/app/features/liked-songs-management/components/StatusCardWithJobStatus.tsx b/app/features/liked-songs-management/components/StatusCardWithJobStatus.tsx
index d19e3b6..f544f4e 100644
--- a/app/features/liked-songs-management/components/StatusCardWithJobStatus.tsx
+++ b/app/features/liked-songs-management/components/StatusCardWithJobStatus.tsx
@@ -38,6 +38,7 @@ interface StatusCardWithJobStatusProps {
   tracksProcessed?: number;
   tracksSucceeded?: number;
   tracksFailed?: number;
+  onClearJob?: () => void;
 }
 
 // Status Card component with job status tooltip
@@ -51,7 +52,8 @@ export const StatusCardWithJobStatus = ({
   showJobStatus = false,
   tracksProcessed = 0,
   tracksSucceeded = 0,
-  tracksFailed = 0
+  tracksFailed = 0,
+  onClearJob
 }: StatusCardWithJobStatusProps) => {
   // State to control tooltip open/close
   const [open, setOpen] = useState(false);
@@ -59,6 +61,7 @@ export const StatusCardWithJobStatus = ({
   const autoCloseTimerRef = useRef<NodeJS.Timeout | null>(null);
   const lastJobIdRef = useRef<string | null>(null);
 
+
   // Remove persistent state - causes state contamination
   // const [persistentJob, setPersistentJob] = useState<AnalysisJob | null>(null);
   // const [persistentStats, setPersistentStats] = useState({ processed: 0, succeeded: 0, failed: 0 });
@@ -118,23 +121,35 @@ export const StatusCardWithJobStatus = ({
         autoCloseTimerRef.current = null;
       }
 
-      // Set auto-close timer for 30 seconds
-      autoCloseTimerRef.current = setTimeout(() => {
-        console.log('StatusCardWithJobStatus: Auto-close timer fired');
-        setOpen(false);
-      }, 30000);
-    } else if (activeJob.status === 'completed' || activeJob.status === 'failed') {
-      // Job finished - KEEP tooltip open permanently until manually closed
-      console.log('StatusCardWithJobStatus: Job completed/failed, keeping tooltip open until manually closed');
+      // Only set auto-close timer if job is still pending/in progress
+      if (activeJob.status === 'pending' || activeJob.status === 'in_progress') {
+        console.log('StatusCardWithJobStatus: Setting 30s auto-close timer for new job');
+        autoCloseTimerRef.current = setTimeout(() => {
+          console.log('StatusCardWithJobStatus: Auto-close timer fired - closing tooltip');
+          setOpen(false);
+        }, 30000);
+      } else {
+        console.log('StatusCardWithJobStatus: New job already completed, no timer needed');
+      }
+    }
+    
+    // ALWAYS check for completion status changes, regardless of isNewJob
+    if (activeJob.status === 'completed' || activeJob.status === 'failed') {
+      // Job finished - clear any existing auto-close timer and keep open
+      console.log('StatusCardWithJobStatus: Job completed/failed, clearing auto-close timer');
       if (autoCloseTimerRef.current) {
+        console.log('StatusCardWithJobStatus: Clearing existing auto-close timer');
         clearTimeout(autoCloseTimerRef.current);
         autoCloseTimerRef.current = null;
       }
       
-      // Keep tooltip open to show final status - no auto-close timer
-      setOpen(true);
+      // Ensure tooltip stays open (server will hide the job after 15 seconds)
+      if (!open) {
+        console.log('StatusCardWithJobStatus: Opening tooltip for completed job');
+        setOpen(true);
+      }
     }
-  }, [activeJob?.id, activeJob?.status, manuallyClosedByUser]);
+  }, [activeJob?.id, activeJob?.status, manuallyClosedByUser, open]);
 
   // Cleanup timer on unmount
   useEffect(() => {
@@ -149,11 +164,19 @@ export const StatusCardWithJobStatus = ({
   const handleManualClose = () => {
     setOpen(false);
     setManuallyClosedByUser(true);
+    
+    // Clear timer
     if (autoCloseTimerRef.current) {
       clearTimeout(autoCloseTimerRef.current);
       autoCloseTimerRef.current = null;
     }
+    
     lastJobIdRef.current = null;
+    
+    // Clear the job from the cache to hide it immediately
+    if (onClearJob) {
+      onClearJob();
+    }
   };
 
   // Calculate remaining tracks from stable values
diff --git a/app/features/liked-songs-management/hooks/useAnalysisSubscription.ts b/app/features/liked-songs-management/hooks/useAnalysisSubscription.ts
index dd6eda4..cd3fd15 100644
--- a/app/features/liked-songs-management/hooks/useAnalysisSubscription.ts
+++ b/app/features/liked-songs-management/hooks/useAnalysisSubscription.ts
@@ -1,8 +1,11 @@
-import { useEffect, useState, useRef, useCallback } from 'react';
+import { useEffect, useCallback, useRef } from 'react';
 import { useWebSocket } from '~/lib/hooks/useWebSocket';
 import { useUpdateTrackAnalysis, useAnalysisStatus, likedSongsKeys } from '../queries/liked-songs-queries';
 import { jobSubscriptionManager, JobStatusUpdate } from '~/lib/services/JobSubscriptionManager';
 import { useQueryClient } from '@tanstack/react-query';
+import { useJobSubscription } from './useJobSubscription';
+import { isAnalysisUpdateMessage, isAnalysisFailedMessage } from '~/lib/types/websocket.types';
+import { useCompletedJobs, CompletedJob } from './useCompletedJobs';
 
 interface AnalysisSubscriptionOptions {
   userId: number;
@@ -10,190 +13,153 @@ interface AnalysisSubscriptionOptions {
 }
 
 export function useAnalysisSubscription({ userId, enabled = true }: AnalysisSubscriptionOptions) {
-  const [isConnected, setIsConnected] = useState(false);
-  const [lastMessage, setLastMessage] = useState<any>(null);
   const updateTrackAnalysis = useUpdateTrackAnalysis();
   const queryClient = useQueryClient();
-  const subscriptionRef = useRef<(() => void) | null>(null);
-  const handleJobUpdateRef = useRef<(update: JobStatusUpdate) => void>();
+  const completedJobsHook = useCompletedJobs();
+  const { addCompletedJob } = completedJobsHook;
+  const lastJobStatusRef = useRef<string | null>(null);
+  const lastJobInfoRef = useRef<any>(null); // Store the last known job info
   
-  // Get current job status to manage WebSocket connection
+  // Get current job status
   const { data: analysisStatus } = useAnalysisStatus();
   
   // WebSocket connection
-  const wsUrl = `ws://localhost:3001/ws`; // WebSocket server URL with /ws path
+  const wsUrl = `ws://localhost:3001/ws`;
   const { isConnected: wsConnected, lastMessage: wsMessage, connect, disconnect } = useWebSocket(wsUrl, {
-    autoConnect: false, // Don't auto-connect, we'll manage this based on active jobs
-    debug: true,
+    autoConnect: false,
+    debug: false,
   });
   
-  const handleWebSocketMessage = (data: any) => {
-    // Handle direct job status messages
-    if (data.jobId && data.status === 'COMPLETED') {
-      console.log('🎉 Job completed via WebSocket, invalidating analysis status');
-      // Invalidate analysis status to reflect job completion
-      queryClient.invalidateQueries({ queryKey: likedSongsKeys.analysisStatus() });
-    }
-    
-    // Handle legacy analysis update messages
-    if (data.type === 'analysis_update' && data.trackId && data.analysis) {
-      // Update the specific track in the cache
-      updateTrackAnalysis(
-        parseInt(data.trackId), 
-        data.analysis, 
-        'analyzed'
-      );
-    } else if (data.type === 'analysis_failed' && data.trackId) {
-      // Mark track as failed
-      updateTrackAnalysis(
-        parseInt(data.trackId), 
-        null, 
-        'failed'
-      );
-    }
-  };
-
-  // Handle WebSocket messages
-  useEffect(() => {
-    if (wsMessage) {
-      console.log('WebSocket message received:', wsMessage);
-      setLastMessage(wsMessage);
-      handleWebSocketMessage(wsMessage);
-      // Route messages through subscription manager
-      jobSubscriptionManager.processMessage(wsMessage);
-    }
-  }, [wsMessage]);
-
-  // Update connection state
-  useEffect(() => {
-    setIsConnected(wsConnected);
-  }, [wsConnected]);
-  
-  // Connect WebSocket once on mount with slight delay
+  // Connect WebSocket on mount
   useEffect(() => {
     if (!enabled) return;
     
-    console.log('🔌 Establishing WebSocket connection...');
-    
-    // Small delay to ensure component is fully mounted
-    const connectTimer = setTimeout(() => {
-      connect();
-    }, 100);
+    // Small delay to ensure component is mounted
+    const timer = setTimeout(() => connect(), 100);
     
-    // Cleanup on unmount
     return () => {
-      clearTimeout(connectTimer);
-      console.log('🔌 Component unmounting, disconnecting WebSocket');
+      clearTimeout(timer);
       disconnect();
     };
-  }, [enabled]); // Include enabled in deps but it's stable
+  }, [enabled, connect, disconnect]);
   
   // Update job subscription manager when job changes
   useEffect(() => {
     if (analysisStatus?.hasActiveJob && analysisStatus?.currentJob) {
-      console.log('📋 Active job detected, setting in subscription manager:', analysisStatus.currentJob.id);
       jobSubscriptionManager.setCurrentJob(analysisStatus.currentJob.id);
+      lastJobStatusRef.current = analysisStatus.currentJob.status;
+      // Store the current job info for use when it completes
+      lastJobInfoRef.current = {
+        id: analysisStatus.currentJob.id,
+        trackCount: analysisStatus.currentJob.trackCount,
+        dbStats: analysisStatus.currentJob.dbStats,
+        trackStates: analysisStatus.currentJob.trackStates,
+        startedAt: analysisStatus.currentJob.startedAt
+      };
     } else if (analysisStatus && !analysisStatus.hasActiveJob) {
-      // Only log when we have a definitive "no active job" response, not during loading
-      console.log('📋 No active job, clearing from subscription manager');
+      // Job disappeared from server - likely completed
+      // Check if we had an active job before
+      const hadActiveJob = lastJobStatusRef.current === 'pending' || lastJobStatusRef.current === 'in_progress';
+      
+      if (hadActiveJob && lastJobInfoRef.current) {
+        console.log('useAnalysisSubscription: Active job disappeared - treating as completion', lastJobInfoRef.current);
+        
+        // Use the real job info instead of hardcoded values
+        const lastJobInfo = lastJobInfoRef.current;
+        
+        // For completed jobs, ensure the stats show completion
+        // The job disappeared because it completed, so all tracks must be processed
+        const completedStats = {
+          tracksProcessed: lastJobInfo.trackCount, // All tracks were processed
+          tracksSucceeded: lastJobInfo.dbStats?.tracksSucceeded || lastJobInfo.trackCount, // Assume success if no failures
+          tracksFailed: lastJobInfo.dbStats?.tracksFailed || 0
+        };
+        
+        const completedJob: CompletedJob = {
+          id: lastJobInfo.id,
+          status: 'completed',
+          trackCount: lastJobInfo.trackCount,
+          dbStats: completedStats,
+          trackStates: lastJobInfo.trackStates,
+          startedAt: lastJobInfo.startedAt,
+          completedAt: new Date()
+        };
+        
+        addCompletedJob(completedJob);
+      }
+      
       jobSubscriptionManager.setCurrentJob(null);
+      lastJobStatusRef.current = null;
+      lastJobInfoRef.current = null;
     }
-  }, [analysisStatus?.hasActiveJob, analysisStatus?.currentJob?.id]);
+  }, [analysisStatus?.hasActiveJob, analysisStatus?.currentJob?.id, addCompletedJob]);
 
-  // Create stable callback for job updates
-  const handleJobUpdate = useCallback((update: JobStatusUpdate) => {
-    console.log('📊 Job update received in handleJobUpdate:', update);
-    console.log('📊 handleJobUpdate called with:', { trackId: update.trackId, status: update.status });
-    
-    if (!update.trackId) {
-      console.log('❌ No trackId in update, ignoring');
-      return;
+  // Track job status for reference (no longer used for completion detection)
+  useEffect(() => {
+    if (analysisStatus?.currentJob) {
+      lastJobStatusRef.current = analysisStatus.currentJob.status;
+    } else {
+      lastJobStatusRef.current = null;
     }
+  }, [analysisStatus?.currentJob?.status]);
+  
+  // Handle job status updates
+  const handleJobUpdate = useCallback((update: JobStatusUpdate) => {
+    if (!update.trackId) return;
     
     const trackId = parseInt(String(update.trackId));
-    console.log(`🔄 Processing job update for track ${trackId}: ${update.status}`);
     
-    // Map job status to UI status and update the cache
+    // Map job status to UI status
     switch (update.status) {
       case 'QUEUED':
       case 'IN_PROGRESS':
-        console.log(`⏳ Setting track ${trackId} to pending`);
         updateTrackAnalysis(trackId, null, 'pending');
         break;
       case 'COMPLETED':
-        console.log(`✅ Setting track ${trackId} to analyzed`);
         updateTrackAnalysis(trackId, null, 'analyzed');
-        // Always refresh job status after track completion
-        console.log('🔄 Track completed, refreshing job status');
-        queryClient.invalidateQueries({ queryKey: likedSongsKeys.analysisStatus() });
-        // Force immediate refetch with logging
-        queryClient.refetchQueries({ queryKey: likedSongsKeys.analysisStatus() }).then(() => {
-          console.log('🔄 Analysis status refetch completed after track completion');
-        });
+        // Invalidate to get fresh job stats from server
+        setTimeout(() => {
+          queryClient.invalidateQueries({ queryKey: likedSongsKeys.analysisStatus() });
+        }, 100);
         break;
       case 'FAILED':
       case 'SKIPPED':
-        console.log(`❌ Setting track ${trackId} to failed`);
         updateTrackAnalysis(trackId, null, 'failed');
-        // Always refresh job status after track failure
-        console.log('🔄 Track failed, refreshing job status');
-        queryClient.invalidateQueries({ queryKey: likedSongsKeys.analysisStatus() });
-        // Force immediate refetch with logging
-        queryClient.refetchQueries({ queryKey: likedSongsKeys.analysisStatus() }).then(() => {
-          console.log('🔄 Analysis status refetch completed after track failure');
-        });
+        // Invalidate to get fresh job stats from server
+        setTimeout(() => {
+          queryClient.invalidateQueries({ queryKey: likedSongsKeys.analysisStatus() });
+        }, 100);
         break;
-      default:
-        console.log(`❓ Unknown status: ${update.status} for track ${trackId}`);
     }
   }, [updateTrackAnalysis, queryClient]);
   
-  // Keep the ref updated with the latest callback
-  useEffect(() => {
-    handleJobUpdateRef.current = handleJobUpdate;
-  }, [handleJobUpdate]);
-
-  // Job subscription manager - stable subscription
+  // Subscribe to job updates using stable subscription
+  useJobSubscription(handleJobUpdate, enabled);
+  
+  // Process WebSocket messages
   useEffect(() => {
-    if (!enabled) return;
-    
-    // Don't create subscription if already exists
-    if (subscriptionRef.current) {
-      console.log('🔌 Subscription already exists, skipping');
-      return;
-    }
+    if (!wsMessage) return;
     
-    console.log('🔌 Setting up job subscription handler');
+    // Route messages through subscription manager
+    jobSubscriptionManager.processMessage(wsMessage);
     
-    // Create a stable handler that uses the ref
-    const stableHandler = (update: JobStatusUpdate) => {
-      console.log('📊 Job update received in stableHandler:', update);
-      
-      // Call the current version via ref
-      if (handleJobUpdateRef.current) {
-        handleJobUpdateRef.current(update);
-      } else {
-        console.error('❌ handleJobUpdateRef.current is null');
-      }
-    };
-    
-    // Subscribe only once with stable handler
-    const unsubscribe = jobSubscriptionManager.subscribe(stableHandler);
-    subscriptionRef.current = unsubscribe;
-    console.log('✅ Subscribed to job updates');
-    
-    return () => {
-      // Only unsubscribe on final unmount
-      if (subscriptionRef.current) {
-        console.log('🔌 Final unmount, unsubscribing from job updates');
-        subscriptionRef.current();
-        subscriptionRef.current = null;
-      }
-    };
-  }, [enabled]); // Only depend on enabled
+    // Handle legacy message formats with type guards
+    if (isAnalysisUpdateMessage(wsMessage)) {
+      const trackId = typeof wsMessage.trackId === 'string' 
+        ? parseInt(wsMessage.trackId) 
+        : wsMessage.trackId;
+      updateTrackAnalysis(trackId, wsMessage.analysis, 'analyzed');
+    } else if (isAnalysisFailedMessage(wsMessage)) {
+      const trackId = typeof wsMessage.trackId === 'string' 
+        ? parseInt(wsMessage.trackId) 
+        : wsMessage.trackId;
+      updateTrackAnalysis(trackId, null, 'failed');
+    }
+  }, [wsMessage, updateTrackAnalysis]);
   
   return {
     isConnected: wsConnected,
-    lastMessage,
+    lastMessage: wsMessage,
+    completedJobsManager: completedJobsHook
   };
 }
\ No newline at end of file
diff --git a/app/features/liked-songs-management/queries/liked-songs-queries.ts b/app/features/liked-songs-management/queries/liked-songs-queries.ts
index 8cb3b62..0a54fdf 100644
--- a/app/features/liked-songs-management/queries/liked-songs-queries.ts
+++ b/app/features/liked-songs-management/queries/liked-songs-queries.ts
@@ -111,28 +111,11 @@ export function useAnalysisStatus() {
       // Convert trackStates back to Map and structure for component
       const trackStatesMap = new Map(Object.entries(data.trackStates || {}).map(([key, value]) => [parseInt(key, 10), value]));
       
-      console.log('Raw server data:', data);
-      console.log('dbStats from server:', data.dbStats);
-      
       // Trust the server's job status completely
       // The server will mark jobs as complete when appropriate
       const isJobActive = data.status === 'pending' || data.status === 'in_progress';
       
-      console.log('Job status from server:', {
-        jobId: data.id,
-        status: data.status,
-        isActive: isJobActive,
-        tracksProcessed: data.dbStats?.tracksProcessed,
-        trackCount: data.trackCount
-      });
-      
-      // Keep showing completed/failed jobs briefly so UI can update
-      // Only filter out jobs that are truly inactive (old completed jobs)
-      const jobAgeMinutes = data.startedAt ? (Date.now() - new Date(data.startedAt).getTime()) / (1000 * 60) : 0;
-      if (!isJobActive && jobAgeMinutes > 1) {
-        console.log('Job is not active (status: ' + data.status + ') and old, returning no active job');
-        return { hasActiveJob: false, currentJob: null };
-      }
+      // Server only returns active jobs now, no completed ones
       
       const currentJob = {
         ...data,
@@ -140,9 +123,6 @@ export function useAnalysisStatus() {
         startedAt: new Date(data.startedAt)
       };
       
-      console.log('Processed currentJob:', currentJob);
-      console.log('Job dbStats:', currentJob.dbStats);
-      
       return {
         hasActiveJob: isJobActive, // Use actual job status, not hardcoded true
         currentJob
@@ -277,17 +257,8 @@ export function useUpdateTrackAnalysis() {
   const queryClient = useQueryClient();
   
   return (trackId: number, analysisData: any, status: string) => {
-    console.log(`🔧 useUpdateTrackAnalysis called: trackId=${trackId}, status=${status}`);
-    
-    const oldData = queryClient.getQueryData(likedSongsKeys.lists()) as TrackWithAnalysis[] || [];
-    const trackExists = oldData.find(t => t.track.id === trackId);
-    
-    console.log(`📊 Cache info: ${oldData.length} tracks total, trackId ${trackId} exists: ${!!trackExists}`);
-    
     queryClient.setQueryData(likedSongsKeys.lists(), (oldData: TrackWithAnalysis[] = []) => {
-      console.log(`🔄 Updating cache for track ${trackId}: ${oldData.length} tracks in cache`);
-      
-      const updatedData = oldData.map(track => 
+      return oldData.map(track => 
         track.track.id === trackId 
           ? { 
               ...track, 
@@ -296,20 +267,6 @@ export function useUpdateTrackAnalysis() {
             }
           : track
       );
-      
-      const updatedTrack = updatedData.find(t => t.track.id === trackId);
-      console.log(`✅ Track ${trackId} updated to status:`, updatedTrack?.uiAnalysisStatus);
-      
-      const changedCount = updatedData.filter((track, index) => 
-        track.uiAnalysisStatus !== oldData[index]?.uiAnalysisStatus
-      ).length;
-      console.log(`📈 Total tracks with status changes: ${changedCount}`);
-      
-      return updatedData;
     });
-    
-    // Force a re-render by invalidating queries after update
-    console.log(`🔄 Invalidating queries to force re-render`);
-    queryClient.invalidateQueries({ queryKey: likedSongsKeys.lists() });
   };
 }
\ No newline at end of file
diff --git a/app/lib/hooks/useWebSocket.ts b/app/lib/hooks/useWebSocket.ts
index d17414a..869afad 100644
--- a/app/lib/hooks/useWebSocket.ts
+++ b/app/lib/hooks/useWebSocket.ts
@@ -1,9 +1,5 @@
 import { useState, useEffect, useCallback, useRef } from 'react';
-
-type WebSocketMessage = {
-  type: string;
-  data: any;
-};
+import { WebSocketMessage } from '~/lib/types/websocket.types';
 
 type WebSocketHookOptions = {
   autoConnect: boolean;
diff --git a/app/lib/repositories/AnalysisJobRepository.ts b/app/lib/repositories/AnalysisJobRepository.ts
index b631b25..14e169a 100644
--- a/app/lib/repositories/AnalysisJobRepository.ts
+++ b/app/lib/repositories/AnalysisJobRepository.ts
@@ -74,16 +74,6 @@ export class AnalysisJobRepository {
       throw error;
     }
 
-    console.log('Raw DB job data:', {
-      id: data?.id,
-      batch_id: data?.batch_id,
-      status: data?.status,
-      tracks_processed: data?.tracks_processed,
-      tracks_succeeded: data?.tracks_succeeded,
-      tracks_failed: data?.tracks_failed,
-      track_count: data?.track_count
-    });
-
     return data;
   }
 
@@ -173,6 +163,7 @@ export class AnalysisJobRepository {
     }
   }
 
+
   async getUserJobs(userId: number, limit = 10): Promise<AnalysisJob[]> {
     const { data, error } = await getSupabase()
       .from('analysis_jobs')
diff --git a/app/lib/services/JobPersistenceService.ts b/app/lib/services/JobPersistenceService.ts
index 00b3f96..dc693a0 100644
--- a/app/lib/services/JobPersistenceService.ts
+++ b/app/lib/services/JobPersistenceService.ts
@@ -25,6 +25,13 @@ export class JobPersistenceService {
     if (!dbJob) return null;
 
     console.log('Raw dbJob from database:', dbJob);
+    
+    // Only return active jobs to client - filter out old completed jobs
+    // This prevents old completed jobs from showing up after reload
+    if (dbJob.status === 'completed' || dbJob.status === 'failed') {
+      console.log(`Job ${dbJob.batch_id} is completed/failed, not returning to client`);
+      return null;
+    }
 
     // Get the original track IDs from the job
     const trackIds = (dbJob.track_ids as number[]) || [];
diff --git a/app/lib/services/JobSubscriptionManager.ts b/app/lib/services/JobSubscriptionManager.ts
index e81050b..183e99c 100644
--- a/app/lib/services/JobSubscriptionManager.ts
+++ b/app/lib/services/JobSubscriptionManager.ts
@@ -1,4 +1,8 @@
-import { AnalysisJob } from '~/features/liked-songs-management/context';
+import { 
+  WebSocketMessage, 
+  isJobStatusMessage, 
+  isDirectJobNotification 
+} from '~/lib/types/websocket.types';
 
 export type JobStatusUpdate = {
   trackId: number;
@@ -47,82 +51,62 @@ export class JobSubscriptionManager {
    * Process a WebSocket message with job-scoped filtering
    * Only processes messages if they belong to the current active job
    */
-  processMessage(message: any): boolean {
-    console.log('JobSubscriptionManager: Processing message', message);
-    console.log('JobSubscriptionManager: Current job ID', this.currentJobId);
-    console.log('JobSubscriptionManager: Is active', this.isActive);
-
+  processMessage(message: WebSocketMessage | any): boolean {
     // Only process if manager is active
     if (!this.isActive || !this.currentJobId) {
-      // Only log this occasionally to avoid spam
-      if (message?.type !== 'connected') {
-        console.log('JobSubscriptionManager: Manager not active or no current job');
-      }
       return false;
     }
 
-    // Handle direct job status messages (from worker)
-    if (message && message.jobId && message.trackId && message.status) {
+    // Handle direct job notification (from worker)
+    if (isDirectJobNotification(message)) {
       // Check if this message belongs to the current job
       if (message.jobId !== this.currentJobId) {
-        console.log('JobSubscriptionManager: Message from different job', message.jobId, 'vs', this.currentJobId);
         return false;
       }
 
       const update: JobStatusUpdate = {
-        trackId: parseInt(String(message.trackId)),
+        trackId: message.trackId,
         status: message.status
       };
 
-      console.log('JobSubscriptionManager: Notifying subscribers with update', update);
-      console.log('JobSubscriptionManager: Number of callbacks:', this.callbacks.size);
-
-      // Notify all subscribers
-      this.callbacks.forEach(callback => {
-        try {
-          console.log('JobSubscriptionManager: Calling callback', callback);
-          callback(update);
-        } catch (error) {
-          console.error('JobSubscriptionManager: Error in callback', error);
-        }
-      });
-
+      this.notifySubscribers(update);
       return true;
     }
 
-    // Handle nested message format (legacy)
-    if (message && message.type === 'job_status' && message.data) {
-      const statusUpdate = message.data;
-      if (!statusUpdate || typeof statusUpdate.trackId !== 'number' || !statusUpdate.status) {
-        console.warn('JobSubscriptionManager: Invalid status update format', statusUpdate);
+    // Handle nested job status message (legacy format)
+    if (isJobStatusMessage(message)) {
+      const { jobId, trackId, status } = message.data;
+      
+      // Check if this message belongs to the current job
+      if (jobId !== this.currentJobId) {
         return false;
       }
 
       const update: JobStatusUpdate = {
-        trackId: statusUpdate.trackId,
-        status: statusUpdate.status
+        trackId,
+        status
       };
 
-      console.log('JobSubscriptionManager: Notifying subscribers with legacy update', update);
-      console.log('JobSubscriptionManager: Number of callbacks:', this.callbacks.size);
-
-      // Notify all subscribers
-      this.callbacks.forEach(callback => {
-        try {
-          console.log('JobSubscriptionManager: Calling callback', callback);
-          callback(update);
-        } catch (error) {
-          console.error('JobSubscriptionManager: Error in callback', error);
-        }
-      });
-
+      this.notifySubscribers(update);
       return true;
     }
 
-    console.log('JobSubscriptionManager: Message format not recognized', message);
     return false;
   }
 
+  /**
+   * Notify all subscribers with an update
+   */
+  private notifySubscribers(update: JobStatusUpdate): void {
+    this.callbacks.forEach(callback => {
+      try {
+        callback(update);
+      } catch (error) {
+        console.error('JobSubscriptionManager: Error in callback', error);
+      }
+    });
+  }
+
   /**
    * Clear all subscriptions and reset state
    */
diff --git a/app/routes/api.analysis.active-job.ts b/app/routes/api.analysis.active-job.ts
index 3e2f1ef..04c97aa 100644
--- a/app/routes/api.analysis.active-job.ts
+++ b/app/routes/api.analysis.active-job.ts
@@ -12,14 +12,8 @@ export async function loader({ request }: LoaderFunctionArgs) {
     const activeJob = await jobPersistenceService.getActiveJobForUser(userSession.userId);
     
     if (activeJob) {
-      console.log('Active job trackStates before serialization:', activeJob.trackStates);
-      console.log('Active job trackStates entries:', Array.from(activeJob.trackStates.entries()));
-      console.log('Active job dbStats from API:', activeJob.dbStats);
-      console.log('Active job status from API:', activeJob.status);
-      
       // Convert trackStates Map to a plain object for JSON serialization
       const trackStatesObj = Object.fromEntries(activeJob.trackStates.entries());
-      console.log('Serialized trackStates object:', trackStatesObj);
       
       const jobForSerialization = {
         ...activeJob,
@@ -27,7 +21,6 @@ export async function loader({ request }: LoaderFunctionArgs) {
       };
       return Response.json(jobForSerialization);
     } else {
-      console.log('No active job found for user:', userSession.userId);
       return Response.json(null);
     }
   } catch (error) {
diff --git a/scripts/analysisWorker.ts b/scripts/analysisWorker.ts
index 45fbb11..2c5c044 100755
--- a/scripts/analysisWorker.ts
+++ b/scripts/analysisWorker.ts
@@ -291,18 +291,18 @@ const main = async () => {
             if (job) {
               const newProcessedCount = job.tracks_processed + 1;
               const newSucceededCount = job.tracks_succeeded + 1;
-              
+
               logger.info(`Updating job progress: ${batchId}, processed: ${job.tracks_processed} → ${newProcessedCount}, succeeded: ${job.tracks_succeeded} → ${newSucceededCount}`);
-              
+
               const updatedJob = await analysisJobRepository.updateJobProgress(
                 batchId,
                 newProcessedCount,
                 newSucceededCount,
                 job.tracks_failed
               );
-              
+
               logger.info(`Job progress updated successfully. New state: processed=${updatedJob.tracks_processed}, succeeded=${updatedJob.tracks_succeeded}, failed=${updatedJob.tracks_failed}`);
-              
+
               // Check if job is complete
               if (newProcessedCount >= job.track_count) {
                 logger.info(`Job ${batchId} is complete: ${newProcessedCount}/${job.track_count} tracks processed`);
@@ -361,18 +361,18 @@ const main = async () => {
             if (job) {
               const newProcessedCount = job.tracks_processed + 1;
               const newFailedCount = job.tracks_failed + 1;
-              
+
               logger.info(`Updating job progress (FAILED): ${batchId}, processed: ${job.tracks_processed} → ${newProcessedCount}, failed: ${job.tracks_failed} → ${newFailedCount}`);
-              
+
               const updatedJob = await analysisJobRepository.updateJobProgress(
                 batchId,
                 newProcessedCount,
                 job.tracks_succeeded,
                 newFailedCount
               );
-              
+
               logger.info(`Job progress updated successfully (FAILED). New state: processed=${updatedJob.tracks_processed}, succeeded=${updatedJob.tracks_succeeded}, failed=${updatedJob.tracks_failed}`);
-              
+
               // Check if job is complete
               if (newProcessedCount >= job.track_count) {
                 logger.info(`Job ${batchId} is complete: ${newProcessedCount}/${job.track_count} tracks processed`);
