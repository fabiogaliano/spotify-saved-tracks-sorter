import { Link, useLoaderData, useFetcher, useNavigate } from '@remix-run/react'
import { useEffect, useState } from 'react'
import { useAnalysisStatusStore } from '~/lib/stores/analysisStatusStore'
import { loader } from '~/features/analysis/loaders/playlist.loader.server'
import { action } from '~/features/analysis/actions/playlist.action.server'

// Define the response type from the action
interface PlaylistAnalysisResponse {
	success: boolean
	playlistId: string
	analysisId?: number
	error?: string
	details?: string
}

export { loader, action }

export default function PlaylistAnalysis() {
	const { playlists, analysisStatusMap, prompt } = useLoaderData<typeof loader>()
	const analysisStore = useAnalysisStatusStore()
	const [hasAnalyzedPlaylists, setHasAnalyzedPlaylists] = useState(false)
	const [isLoading, setIsLoading] = useState(true)
	const fetcher = useFetcher()
	const navigate = useNavigate()

	// Get the data from the fetcher response
	const fetcherData = fetcher.data as PlaylistAnalysisResponse | undefined

	// Initialize analysis status for playlists
	useEffect(() => {
		if (!playlists) {
			setIsLoading(true)
			return
		}

		setIsLoading(false)

		if (playlists.length === 0) return

		// Initialize analysis status for all playlists
		let analyzedCount = 0
		playlists.forEach(playlist => {
			// If the playlist is already analyzed according to the database
			if (analysisStatusMap[playlist.id]) {
				analysisStore.setTrackStatus(playlist.id.toString(), 'analyzed')
				analyzedCount++
			} else {
				// Set as idle if not analyzed
				analysisStore.setTrackStatus(playlist.id.toString(), 'idle')
			}
		})

		// Update the hasAnalyzedPlaylists state
		setHasAnalyzedPlaylists(analyzedCount > 0)
	}, [playlists, analysisStatusMap])

	// Track the currently analyzing playlist ID
	useEffect(() => {
		if (fetcher.state === 'submitting' && fetcher.formData) {
			const playlistId = fetcher.formData.get('playlistId')
			if (playlistId) {
				console.log(`Playlist ${playlistId} is now being analyzed`)
				analysisStore.setCurrentlyAnalyzing(playlistId.toString())
				analysisStore.setTrackStatus(playlistId.toString(), 'analyzing')
			}
		}
	}, [fetcher.state, fetcher.formData])

	// Update analysis status when fetcher completes and process next playlist if needed
	useEffect(() => {
		if (fetcher.state === 'idle' && fetcherData) {
			const { success, playlistId, analysisId } = fetcherData
			if (playlistId) {
				console.log(`Playlist ${playlistId} analysis completed with success: ${success}`)
				analysisStore.setTrackStatus(
					playlistId.toString(),
					success ? 'analyzed' : 'error'
				)

				// If successful, update hasAnalyzedPlaylists
				if (success) {
					setHasAnalyzedPlaylists(true)
				}

				// Check if there are more playlists to analyze
				const nextPlaylist = analysisStore.getNextTrackToAnalyze()
				if (nextPlaylist) {
					// Remove this playlist from the queue
					analysisStore.removeFromQueue(nextPlaylist.id)

					// Set as currently analyzing
					analysisStore.setCurrentlyAnalyzing(nextPlaylist.id)

					// Submit the next playlist for analysis
					const formData = new FormData()
					formData.append('action', 'analyze')
					formData.append('playlistId', nextPlaylist.id.toString())
					formData.append('playlistName', nextPlaylist.name)
					formData.append('playlistDescription', nextPlaylist.description || '')
					formData.append('prompt', prompt)

					// Short timeout to ensure the UI updates before starting the next request
					setTimeout(() => {
						fetcher.submit(formData, { method: 'post' })
					}, 500)
				} else {
					// No more playlists to analyze
					analysisStore.setCurrentlyAnalyzing(null)
				}
			}
		}
	}, [fetcher.state, fetcherData])

	// Function to start analysis for a single playlist
	const analyzePlaylist = (playlist: any) => {
		analysisStore.setCurrentlyAnalyzing(playlist.id.toString())
		analysisStore.setTrackStatus(playlist.id.toString(), 'analyzing')

		const formData = new FormData()
		formData.append('action', 'analyze')
		formData.append('playlistId', playlist.id.toString())
		formData.append('playlistName', playlist.name)
		formData.append('playlistDescription', playlist.description || '')
		formData.append('prompt', prompt)

		fetcher.submit(formData, { method: 'post' })
	}

	// Function to start analysis for all playlists
	const analyzeAllPlaylists = () => {
		// Only analyze playlists that are in 'idle' or 'error' state
		const playlistsToAnalyze = playlists.filter(playlist => {
			const status = analysisStore.getTrackStatus(playlist.id.toString())
			return status === 'idle' || status === 'error'
		})

		if (playlistsToAnalyze.length === 0) return

		// Process first playlist immediately
		const firstPlaylist = playlistsToAnalyze[0]
		analysisStore.setCurrentlyAnalyzing(firstPlaylist.id.toString())
		analysisStore.setTrackStatus(firstPlaylist.id.toString(), 'analyzing')

		// Queue the rest of the playlists
		if (playlistsToAnalyze.length > 1) {
			const remainingPlaylists = playlistsToAnalyze.slice(1).map(p => ({
				id: p.id.toString(),
				name: p.name,
				description: p.description || '',
			}))

			// Set all remaining playlists as queued
			remainingPlaylists.forEach(playlist => {
				analysisStore.setTrackStatus(playlist.id, 'queued')
			})

			// Store in the queue
			analysisStore.setQueuedTracks(remainingPlaylists)
		}

		// Submit the first playlist for analysis
		const formData = new FormData()
		formData.append('action', 'analyze')
		formData.append('playlistId', firstPlaylist.id.toString())
		formData.append('playlistName', firstPlaylist.name)
		formData.append('playlistDescription', firstPlaylist.description || '')
		formData.append('prompt', prompt)

		fetcher.submit(formData, { method: 'post' })
	}

	if (isLoading) {
		return (
			<div className="container mx-auto px-4 py-8">
				<div className="flex flex-col items-center justify-center min-h-[60vh]">
					<div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500 mb-4"></div>
					<p className="text-lg">Loading playlists...</p>
				</div>
			</div>
		)
	}

	return (
		<div className="container mx-auto px-4 py-8">
			<h1 className="text-3xl font-bold mb-6">Flagged Playlist Analysis</h1>

			<div className="mb-6">
				<p className="mb-4">
					This page displays your flagged Spotify playlists that are candidates for
					sorting your tracks into. Analyze these playlists to help the system better
					understand their mood, themes, and context.
				</p>

				<div className="flex justify-between items-center mb-6">
					<div className="flex items-center space-x-4">
						<Link
							to="/analysis/music"
							className="bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-3 rounded-full"
							aria-label="Back to Playlists"
						>
							<svg
								xmlns="http://www.w3.org/2000/svg"
								className="h-5 w-5"
								viewBox="0 0 20 20"
								fill="currentColor"
							>
								<path
									fillRule="evenodd"
									d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z"
									clipRule="evenodd"
								/>
							</svg>
						</Link>

						<button
							onClick={analyzeAllPlaylists}
							className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-sm"
							disabled={!playlists || playlists.length === 0}
						>
							Analyze All Playlists
						</button>
					</div>

					<Link
						to="/matching"
						className={`py-2 px-4 rounded ${hasAnalyzedPlaylists
								? 'bg-purple-600 hover:bg-purple-700 text-white'
								: 'bg-gray-300 text-gray-500 cursor-not-allowed'
							}`}
						aria-disabled={!hasAnalyzedPlaylists}
						onClick={e => !hasAnalyzedPlaylists && e.preventDefault()}
					>
						Continue to Matching
					</Link>
				</div>
			</div>

			{playlists && playlists.length > 0 ? (
				<div className="bg-white shadow-md rounded-lg overflow-hidden">
					<table className="min-w-full divide-y divide-gray-200">
						<thead className="bg-gray-50">
							<tr>
								<th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
									Playlist
								</th>
								<th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
									Description
								</th>
								<th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
									Status
								</th>
								<th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
									Actions
								</th>
							</tr>
						</thead>
						<tbody className="bg-white divide-y divide-gray-200">
							{playlists.map(playlist => (
								<tr key={playlist.id}>
									<td className="px-6 py-4 whitespace-nowrap">
										<div className="text-sm font-medium text-gray-900">
											{playlist.name}
										</div>
									</td>
									<td className="px-6 py-4 whitespace-nowrap">
										<div className="text-sm text-gray-500 truncate max-w-xs">
											{playlist.description || 'No description'}
										</div>
									</td>
									<td className="px-6 py-4 whitespace-nowrap">
										<span
											className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                      ${analysisStore.getTrackStatus(playlist.id.toString()) ===
													'analyzed'
													? 'bg-green-100 text-green-800'
													: analysisStore.getTrackStatus(playlist.id.toString()) ===
														'analyzing'
														? 'bg-yellow-100 text-yellow-800'
														: analysisStore.getTrackStatus(playlist.id.toString()) ===
															'queued'
															? 'bg-blue-100 text-blue-800'
															: analysisStore.getTrackStatus(playlist.id.toString()) ===
																'error'
																? 'bg-red-100 text-red-800'
																: 'bg-gray-100 text-gray-800'
												}`}
										>
											{analysisStore.getTrackStatus(playlist.id.toString()) === 'analyzed'
												? 'Analyzed'
												: analysisStore.getTrackStatus(playlist.id.toString()) ===
													'analyzing'
													? 'Analyzing...'
													: analysisStore.getTrackStatus(playlist.id.toString()) ===
														'queued'
														? 'Queued'
														: analysisStore.getTrackStatus(playlist.id.toString()) === 'error'
															? 'Error'
															: 'Not Analyzed'}
										</span>
									</td>
									<td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
										{analysisStore.getTrackStatus(playlist.id.toString()) !==
											'analyzing' &&
											analysisStore.getTrackStatus(playlist.id.toString()) !==
											'queued' && (
												<button
													onClick={() => analyzePlaylist(playlist)}
													className="text-blue-600 hover:text-blue-900"
												>
													Analyze
												</button>
											)}
									</td>
								</tr>
							))}
						</tbody>
					</table>
				</div>
			) : (
				<div className="text-center py-10 bg-white shadow-md rounded-lg">
					<p className="text-gray-600">
						No flagged playlists found. Please flag some playlists as candidates for
						sorting your tracks.
					</p>
					<Link
						to="/playlists"
						className="mt-4 inline-block bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-sm"
					>
						Go to Playlists
					</Link>
				</div>
			)}
		</div>
	)
}
